#!/usr/bin/env python

#
#   This file is a wrapper for executing R's decision trees
#   What it does: takes the configuration in json 
#   sets the parameters of the R script and executes the script
#   the R script is in the same folder; but the path is hard-coded
#   To change path: see section with MAGIC with R
#

# Trains a classifier and classifies new instances
import argparse
import logging

from common.configuration import ConfigurationHandler
from common.storage import FileStorageHandler
import pandas as pd

from subprocess import call

# 
#   This section sets up the paths for logging and output
#   The standard logging is to write things to the console, 
#   but we can redirect it to a file
# 
logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)



if __name__ == '__main__':

    logger.info("#### Running: {} ####".format(__file__))
    logger.info(">>> Starting classification: ")
    #
    #   This section parses the json file with the parameters
    #   and sets the appropriate paths and variables
    #
    parser = argparse.ArgumentParser()
    parser.add_argument("--locations_config", help="Path to locations file", type=str, required=False)
    parser.add_argument("--files_format_config", help="Path to files format configuration file", type=str,
                        required=False)
    parser.add_argument("train_input_csv",
                        help="Path to input train csv file", type=str)
    parser.add_argument("classify_input_csv",
                        help="Path to input classify csv file", type=str)
    args = vars(parser.parse_args())

    locations_file_path = "./locations.json" if args['locations_config'] is None else args['locations_config']
    files_format_file_path = "./files_format.json" if args['files_format_config'] is None else args['files_format_config']

    logger.info(">>>> Setting up paths complete!")

    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)


    storage_dir_conf = locations_config.get('storage_dir', None)
    storage_dir_path = storage_dir_conf.get("path", "")
    storage_dir = FileStorageHandler(storage_dir_path)

    train_input_file = storage_dir.get_file_path(args['train_input_csv'])
    classify_input_file = storage_dir.get_file_path(args['classify_input_csv'])

    output_file_path = storage_dir.get_file_path("classify-output_c50_r.csv")
    output_file_count_path = storage_dir.get_file_path("classify-output_c50_r_count.csv")
    
    r_script_exec = locations_config.get("rscript_executable_path", "RScript.exe")

    #
    # This is where the magic with R begins
    #

    call([r_script_exec, "./bin/classify_c5.R", train_input_file, classify_input_file, output_file_path, output_file_count_path, files_format_config.get("csv_sep", ",")])
    
    #
    # ####### END MAGIC R ########
    #