#!/usr/bin/env python

#
#   This file is a wrapper for executing R's decision trees
#   What it does: takes the configuration in json 
#   sets the parameters of the R script and executes the script
#   the R script is in the same folder; but the path is hard-coded
#   To change path: see section with MAGIC with R
#

# Trains a classifier and classifies new instances
import argparse
import logging

from common.configuration import ConfigurationHandler
from common.workspace import WorkspaceHandler
import pandas as pd

from subprocess import call

# 
#   This section sets up the paths for logging and output
#   The standard logging is to write things to the console, 
#   but we can redirect it to a file
# 
logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)



if __name__ == '__main__':

    CLASSIFIER_NAME = "C50"

    logger.info("#### Running: {} ####".format(__file__))

    # Parse input parameters
    parser = argparse.ArgumentParser()
    parser.add_argument("--locations_config", help="Path to locations file", type=str, required=False)
    parser.add_argument("--files_format_config", help="Path to files format configuration file", type=str,
                        required=False)
    parser.add_argument("--classes_config", help="Path to classes configuration file", type=str, required=False)
    parser.add_argument("--classifiers_options", help="Path to classifiers options file", type=str, required=False)
    parser.add_argument("train_input_csv",
                        help="Path to input train csv file", type=str)
    parser.add_argument("classify_input_csv",
                        help="Path to input classify csv file", type=str)

    args = vars(parser.parse_args())

    locations_file_path = "./locations.json" if args['locations_config'] is None else args['locations_config']
    files_format_file_path = "./files_format.json" if args['files_format_config'] is None else args[
        'files_format_config']
    classifiers_options_file_path = "./classifiers_options.json" if args['classifiers_options'] is None else args[
        'classifiers_options']
    classes_file_path = "./classes.json" if args['classes_config'] is None else args['classes_config']

    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)
    csv_separator = files_format_config.get("csv_sep", ",")

    try:
        classes_config = ConfigurationHandler(classes_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(classes_file_path))
        exit(1)
    decision_classes = classes_config.get("classes", {})


    workspace_dir_conf = locations_config.get('workspace_dir', None)
    workspace_dir_path = workspace_dir_conf.get("path", "")
    workspace_dir = WorkspaceHandler(workspace_dir_path)

    train_input_file = workspace_dir.get_processing_file_path(args['train_input_csv'])
    classify_input_file = workspace_dir.get_processing_file_path(args['classify_input_csv'])

    output_file_prefix = workspace_dir.get_results_file_path("classify-output-{}".format(CLASSIFIER_NAME))

    r_script_exec = locations_config.get("rscript_executable_path", "RScript.exe")

    #
    # This is where the magic with R begins
    #

    logger.info(">>>> Running R script")

    call([r_script_exec, "./bin/classify_c5.R", train_input_file, classify_input_file, output_file_prefix,
          classifiers_options_file_path, classes_file_path, csv_separator])
    
    #
    # ####### END MAGIC R ########
    #

    # create filtered output files for different classes
    output_full = pd.read_csv("{}.csv".format(output_file_prefix), sep=csv_separator, encoding="utf-8")

    for decision_class in decision_classes["labeled"]:
        output_file_path_class = workspace_dir.get_results_file_path(
            "classify-output-{}-{}.csv".format(CLASSIFIER_NAME, decision_class['name']))
        output_class = output_full[(output_full['pred_class'] == decision_class['value'])]
        output_class.to_csv(output_file_path_class, sep=csv_separator, index=False, encoding="utf-8")

    output_file_path_class = workspace_dir.get_results_file_path(
        "classify-output-{}-{}.csv".format(CLASSIFIER_NAME, decision_classes["default"]['name']))
    output_class = output_full[(output_full['pred_class'] == decision_classes["default"]['value'])]
    output_class.to_csv(output_file_path_class, sep=csv_separator, index=False, encoding="utf-8")