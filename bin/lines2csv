#!/usr/bin/env python

# Transform code structure into a flat CSV file

import argparse
import logging
import os

from common.configuration import ConfigurationHandler
from common.workspace import WorkspaceHandler
from prepare.case_extractors import LinesCaseExtractor

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

if __name__ == '__main__':

    logger.info("#### Running: {} ####".format(__file__))

    parser = argparse.ArgumentParser()
    parser.add_argument("--locations_config", help="Path to locations configuration file", type=str, required=False)
    parser.add_argument("--classes_config", help="Path to classes configuration file", type=str, required=False)
    parser.add_argument("--files_format_config", help="Path to files format configuration file", type=str, required=False)
    parser.add_argument("code_location_config_key",
                        help="Name of the node in configuration defining path to code", type=str)
    args = vars(parser.parse_args())

    locations_file_path = "./locations.json" if args['locations_config'] is None else args['locations_config']
    classes_file_path = "./classes.json" if args['classes_config'] is None else args['classes_config']
    files_format_file_path = "./files_format.json" if args['files_format_config'] is None else args['files_format_config']

    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    workspace_dir_conf = locations_config.get('workspace_dir', None)
    workspace_dir_path = workspace_dir_conf.get("path", "")
    workspace_dir = WorkspaceHandler(workspace_dir_path)

    code_loc_config_key = args['code_location_config_key']
    code_loc = locations_config.get(code_loc_config_key, None)

    output_file_path = workspace_dir.get_file_path("{}-lines.csv".format(code_loc_config_key))

    try:
        classes_config = ConfigurationHandler(classes_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(classes_file_path))
        exit(1)
    decision_classes = classes_config.get("classes", {})

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)

    lines_extractor = LinesCaseExtractor(code_loc, output_file_path, decision_classes,
                                         sep=files_format_config.get("csv_sep", ","))
    lines_extractor.extract()








