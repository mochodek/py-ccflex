#!/usr/bin/env python

# Extracts manual features
import argparse
import logging

from common.configuration import ConfigurationHandler
from common.workspace import WorkspaceHandler
from prepare.feature_extractors import SubstringCountingFeatureExtraction, WholeWordCountingFeatureExtraction, \
    LineFeaturesExtractionController, CommentFeatureExtraction, WordCountFeatureExtraction, CharCountFeatureExtraction, \
    WholeLineCommentFeatureExtraction, BlankLineFeatureExtraction, PythonWholeLineCommentFeatureExtraction, \
    RegexpCountingFeatureExtraction

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

default_extractors = ["PatternSubstringExctractor", "PatternWordExtractor", "BlankLineFeatureExtraction",
                        "CommentStringExtractor", "NoWordsExtractor", "NoCharsExtractor", "RegexpCountingFeatureExtraction"]

if __name__ == '__main__':

    logger.info("\n#### Running: {}".format(__file__))


    parser = argparse.ArgumentParser()
    parser.add_argument("code_location_config_key",
                        help="Name of the node in configuration defining path to code",
                        type=str)
    parser.add_argument("--locations_config", help="Path to locations configuration file",
                        type=str, required=False, default="./locations.json")
    parser.add_argument("--files_format_config", help="Path to files format configuration file",
                        type=str, required=False, default="./files_format.json")
    parser.add_argument("--manual_features_config", help="Path to manual features configuration file",
                        type=str, required=False, default="./manual_features.json")
    parser.add_argument("--add_decision_class", help="Shall the decision class be added to output?",
                        default=False, action='store_true')
    parser.add_argument("--add_contents", help="Shall the content of the line be added to output?",
                        default=False, action='store_true')
    parser.add_argument('--extractors', nargs='+', type=str,
                        help="The list of feature extractors.", required=False)
    args = vars(parser.parse_args())
    logger.info("Run parameters: {}".format(str(args)))

    locations_file_path = args['locations_config']
    files_format_file_path = args['files_format_config']
    manual_features_file_path = args['manual_features_config']
    extractors_to_use = args['extractors']
    if extractors_to_use is None:
        extractors_to_use = default_extractors

    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    try:
        manual_features_config = ConfigurationHandler(manual_features_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(manual_features_file_path))
        exit(1)

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)
    separator = files_format_config.get("csv_sep", ",")


    workspace_dir_conf = locations_config.get('workspace_dir', None)
    workspace_dir_path = workspace_dir_conf.get("path", "")
    workspace_dir = WorkspaceHandler(workspace_dir_path)

    code_loc_config_key = args['code_location_config_key']
    code_loc = locations_config.get(code_loc_config_key, None)

    add_decision_class = args['add_decision_class']
    add_contents = args['add_contents']

    input_file_path = workspace_dir.get_processing_file_path("{}-lines.csv".format(code_loc_config_key))
    output_file_path = workspace_dir.get_processing_file_path("{}-manual.csv".format(code_loc_config_key))

    manual_string_counting_features = manual_features_config.get('manual_string_counting_features', [])
    manual_whole_word_counting_features = manual_features_config.get('manual_whole_word_counting_features', [])
    regexp_counting_features = manual_features_config.get('regexp_counting_features', [])

    logger.info(">>> Preparing feature extractors")


    extractors = []
    if "PatternSubstringExctractor" in extractors_to_use:
        substring_counting_extractor = SubstringCountingFeatureExtraction(manual_string_counting_features)
        extractors.append(substring_counting_extractor)
        logger.info(">>> Using {}".format("PatternSubstringExctractor"))

    if "PatternWordExtractor" in extractors_to_use:
        manual_whole_word_counting_exractor = WholeWordCountingFeatureExtraction(manual_whole_word_counting_features)
        extractors.append(manual_whole_word_counting_exractor)
        logger.info(">>> Using {}".format("PatternWordExtractor"))

    if "RegexpCountingFeatureExtraction" in extractors_to_use:
        regexp_counting_exractor = RegexpCountingFeatureExtraction(regexp_counting_features)
        extractors.append(regexp_counting_exractor)
        logger.info(">>> Using {}".format("RegexpCountingFeatureExtraction"))
        
    if "CommentStringExtractor" in extractors_to_use:
        comment_extractor = CommentFeatureExtraction()
        extractors.append(comment_extractor)
        logger.info(">>> Using {}".format("CommentStringExtractor"))

    if "WholeLineCommentFeatureExtraction" in extractors_to_use:
        comment_extractor = WholeLineCommentFeatureExtraction()
        extractors.append(comment_extractor)
        logger.info(">>> Using {}".format("WholeLineCommentFeatureExtraction"))
		
    if "PythonWholeLineCommentFeatureExtraction" in extractors_to_use:
        comment_extractor = PythonWholeLineCommentFeatureExtraction()
        extractors.append(comment_extractor)
        logger.info(">>> Using {}".format("PythonWholeLineCommentFeatureExtraction"))
		
    if "NoWordsExtractor" in extractors_to_use:
        no_words_extractor = WordCountFeatureExtraction()
        extractors.append(no_words_extractor)
        logger.info(">>> Using {}".format("NoWordsExtractor"))

    if "NoCharsExtractor" in extractors_to_use:
        no_chars_extractor = CharCountFeatureExtraction()
        extractors.append(no_chars_extractor)
        logger.info(">>> Using {}".format("NoCharsExtractor"))
        
    if "BlankLineFeatureExtraction" in extractors_to_use:
        blank_line_extractor = BlankLineFeatureExtraction()
        extractors.append(blank_line_extractor)
        logger.info(">>> Using {}".format("BlankLineFeatureExtraction"))
		
    logger.info(">>> Extracting features")

    controller = LineFeaturesExtractionController(extractors,
                                                  input_file_path, output_file_path,
                                                  sep=separator,
                                                  add_decision_class=add_decision_class,
                                                  add_contents=add_contents)
    controller.extract()

    logger.info(">>> Features stored in the file {}".format(output_file_path))






