#!/usr/bin/env python

# Merges results file into one showing classification by different algorithms

import argparse
import logging
import os
import pandas as pd

from common.configuration import ConfigurationHandler
from common.workspace import WorkspaceHandler

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

if __name__ == '__main__':

    logger.info("#### Running: {} ####".format(__file__))

    # Parse input parameters
    parser = argparse.ArgumentParser()
    parser.add_argument("--locations_config", help="Path to locations file", type=str, required=False)
    parser.add_argument("--files_format_config", help="Path to files format configuration file", type=str,
                        required=False)
    parser.add_argument("--classes_config", help="Path to classes configuration file", type=str, required=False)
    parser.add_argument("--classifiers_options", help="Path to classifiers options file", type=str, required=False)

    args = vars(parser.parse_args())

    locations_file_path = "./locations.json" if args['locations_config'] is None else args['locations_config']
    files_format_file_path = "./files_format.json" if args['files_format_config'] is None else args[
        'files_format_config']
    classifiers_options_file_path = "./classifiers_options.json" if args['classifiers_options'] is None else args[
        'classifiers_options']
    classes_file_path = "./classes.json" if args['classes_config'] is None else args['classes_config']

    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)

    try:
        classifiers_options_config = ConfigurationHandler(classifiers_options_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(classifiers_options_file_path))
        exit(1)

    try:
        classes_config = ConfigurationHandler(classes_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(classes_file_path))
        exit(1)
    decision_classes = classes_config.get("classes", {})

    csv_separator = files_format_config.get("csv_sep", ",")

    workspace_dir_conf = locations_config.get('workspace_dir', None)
    workspace_dir_path = workspace_dir_conf.get("path", "")
    workspace_dir = WorkspaceHandler(workspace_dir_path)

    logger.info(">>>> Starting to merge the result csv files...")

    output_file_path = workspace_dir.get_results_file_path("classify-output-ALL.csv")

    merged_df = None
    pred_colnames = []

    # iterate over all available classifiers to build a single file
    for classifier_name in classifiers_options_config.config.keys():
        # skip keys that do not represent classifiers
        if classifier_name in ("INFO"):
            continue

        classifier_output_file = workspace_dir.get_results_file_path("classify-output-{}.csv".format(classifier_name))

        if os.path.exists(classifier_output_file):
            res_df = pd.read_csv(classifier_output_file, sep=csv_separator, encoding="utf-8")
            res_df.rename(columns={'pred_class': "pred_{}".format(classifier_name)}, inplace=True)

            if merged_df is None:
                merged_df = res_df
            else:
                merged_df = pd.concat([merged_df, res_df[["pred_{}".format(classifier_name)]]], axis=1)
            pred_colnames.append("pred_{}".format(classifier_name))

    logger.info(">>>> Saving the merged files")
    merged_df.to_csv(output_file_path, sep=csv_separator, index=False, encoding="utf-8")

    for decision_class in decision_classes["labeled"]:
        output_file_path_class = workspace_dir.get_results_file_path(
            "classify-output-ALL-{}.csv".format(decision_class['name']))
        output_class = merged_df[merged_df[pred_colnames].apply(
            lambda x: list(x).count(decision_class['value']) > 0, axis=1)]
        output_class.to_csv(output_file_path_class, sep=csv_separator, index=False, encoding="utf-8")

    output_file_path_class = workspace_dir.get_results_file_path(
        "classify-output-ALL-{}.csv".format(decision_classes["default"]['name']))
    output_class = merged_df[merged_df[pred_colnames].apply(
        lambda x: list(x).count(decision_classes["default"]['value']) > 0, axis=1)]
    output_class.to_csv(output_file_path_class, sep=csv_separator, index=False, encoding="utf-8")

