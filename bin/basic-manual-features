#!/usr/bin/env python

# Extracts basic manual features
import argparse
import logging

from common.configuration import ConfigurationHandler
from common.storage import FileStorageHandler
from prepare.feature_extractors import SubstringCountingFeatureExtraction, WholeWordCountingFeatureExtraction, \
    LineFeaturesExtractionController, CommentFeatureExtraction, WordCountFeatureExtraction, CharCountFeatureExtraction

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--config_file", help="Path to configuration file", type=str, required=False)
    parser.add_argument("--add_decision_class", help="Shall the decision class be added to output?",
                        type=bool, required=False)
    parser.add_argument("--add_contents", help="Shall the content of the line be added to output?",
                        type=bool, required=False)
    parser.add_argument("code_location_config_key",
                        help="Name of the node in configuration defining path to code", type=str)
    args = vars(parser.parse_args())

    config_file_path = "./configuration.json" if args['config_file'] is None else args['config_file']

    try:
        config = ConfigurationHandler(config_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(config_file_path))
        exit(1)

    storage_dir_conf = config.get('storage_dir', None)
    storage_dir_path = storage_dir_conf.get("path", "")
    storage_dir = FileStorageHandler(storage_dir_path)

    code_loc_config_key = args['code_location_config_key']
    code_loc = config.get(code_loc_config_key, None)

    add_decision_class = args['add_decision_class']
    add_contents = args['add_contents']

    input_file_path = storage_dir.get_file_path("{}-lines.csv".format(code_loc_config_key))
    output_file_path = storage_dir.get_file_path("{}-basic-manual.csv".format(code_loc_config_key))

    manual_string_counting_features = config.get('manual_string_counting_features', [])
    manual_whole_word_counting_features = config.get('manual_whole_word_counting_features', [])

    substring_counting_extractor = SubstringCountingFeatureExtraction(manual_string_counting_features)
    manual_whole_word_counting_exractor = WholeWordCountingFeatureExtraction(manual_whole_word_counting_features)
    comment_extractor = CommentFeatureExtraction()
    no_words_extractor = WordCountFeatureExtraction()
    no_chars_extractor = CharCountFeatureExtraction()

    extractors = [substring_counting_extractor,
                  manual_whole_word_counting_exractor,
                  comment_extractor,
                  no_words_extractor,
                  no_chars_extractor]

    controller = LineFeaturesExtractionController(extractors,
                                                  input_file_path, output_file_path,
                                                  sep=config.get("csv_sep", ","),
                                                  add_decision_class=add_decision_class,
                                                  add_contents=add_contents)
    controller.extract()








