#!/usr/bin/env python

# Transform code structure into a flat CSV file

import argparse
import logging
import os

from common.configuration import ConfigurationHandler
from common.storage import FileStorageHandler
from prepare.case_extractors import LinesCaseExtractor

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--config_file", help="Path to configuration file", type=str, required=False)
    parser.add_argument("code_location_config_key",
                        help="Name of the node in configuration defining path to code", type=str)
    args = vars(parser.parse_args())

    config_file_path = "./configuration.json" if args['config_file'] is None else args['config_file']

    try:
        config = ConfigurationHandler(config_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(config_file_path))
        exit(1)

    storage_dir_conf = config.get('storage_dir', None)
    storage_dir_path = storage_dir_conf.get("path", "")
    storage_dir = FileStorageHandler(storage_dir_path)

    code_loc_config_key = args['code_location_config_key']
    code_loc = config.get(code_loc_config_key, None)

    output_file_path = storage_dir.get_file_path("{}-lines.csv".format(code_loc_config_key))

    decision_classes = config.get("classes", {})

    lines_extractor = LinesCaseExtractor(code_loc, output_file_path, decision_classes, sep=config.get("csv_sep", ","))
    lines_extractor.extract()








