#!/usr/bin/env python

# Removes a given column from a csv file or recursively for all csv files if folder is given

import argparse
import csv
import logging
import os
import pandas as pd

from common.configuration import ConfigurationHandler

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)


def remove_columns(input_path, columns, csv_separator):
    if not os.path.exists(input_path):
        logger.info("File / folder {} does not exist".format(input_path))
        return

    if os.path.isfile(input_path) and input_path.endswith(".csv"):

        csv_data = pd.read_csv(input_path, sep=csv_separator, encoding="utf-8")
        columns_in_file = set(list(csv_data.columns))
        available_columns = list(columns_in_file & set(columns))

        if len(available_columns) > 0:
            csv_data.drop(available_columns, axis=1, inplace=True)
            csv_data.to_csv(input_path, sep=csv_separator, index=False, encoding="utf-8", quoting=csv.QUOTE_NONNUMERIC)
            logger.info(">>> Removed columns {} from file {}".format(", ".join(available_columns), input_path))

    elif os.path.isdir(input_path):
        children = [f for f in os.listdir(input_path)]
        for child_path in children:
            child_path = os.path.join(os.path.normpath(input_path), child_path)
            remove_columns(child_path, columns, csv_separator)


if __name__ == '__main__':

    logger.info("\n#### Running: {}".format(__file__))

    parser = argparse.ArgumentParser()
    parser.add_argument("path",
                        help="A path to a file or directory", type=str)
    parser.add_argument('--columns', nargs='+', type=str,
                        help="The names of columns to remove", required=True)
    parser.add_argument("--files_format_config", help="Path to files format configuration file",
                        type=str, required=False, default="./files_format.json")

    args = vars(parser.parse_args())
    logger.info("Run parameters: {}".format(str(args)))

    input_path = args['path']
    columns = args['columns']
    files_format_file_path = args['files_format_config']

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)

    csv_separator = files_format_config.get("csv_sep", ",")

    remove_columns(input_path, columns, csv_separator)

    logger.info(">>> Columns successfuly removed")
