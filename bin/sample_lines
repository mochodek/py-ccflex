#!/usr/bin/env python

# Merges inputs csv file into one

import argparse
import logging
import pandas as pd
import gc
import csv
import random

from common.configuration import ConfigurationHandler
from common.workspace import WorkspaceHandler
from collections import deque

logger = logging.getLogger('pyccflex')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
logger.addHandler(ch)


if __name__ == '__main__':

    logger.info("\n#### Running: {}".format(__file__))

    # Parse input parameters
    parser = argparse.ArgumentParser()
    parser.add_argument("output_file",
                        help="Path to an output file", type=str)
    parser.add_argument("--files", nargs='+', type=str,
                        help="The names of files to sample from", required=True)
    parser.add_argument("--lines", help="The name of the output file",
                        default=50, type=int)
    parser.add_argument("--locations_config", help="Path to locations configuration file",
                        type=str, required=False, default="./locations.json")
    parser.add_argument("--files_format_config", help="Path to files format configuration file",
                        type=str, required=False, default="./files_format.json")
    parser.add_argument("--ctx_next", help="How many following lines add to each line",
                        default=0, type=int)
    parser.add_argument("--ctx_prev", help="How many preceding lines add to each line",
                        default=0, type=int)


    args = vars(parser.parse_args())
    logger.info("Run parameters: {}".format(str(args)))

    locations_file_path = args['locations_config']
    files_format_file_path = args['files_format_config']
    files = args['files']
    lines = args['lines']
    output_file = args['output_file']
    ctx_next = args['ctx_next']
    ctx_prev = args['ctx_prev']


    try:
        locations_config = ConfigurationHandler(locations_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(locations_file_path))
        exit(1)

    try:
        files_format_config = ConfigurationHandler(files_format_file_path)
    except Exception as e:
        logger.error("Couldn't load configuration file {}".format(files_format_file_path))
        exit(1)

    csv_separator = files_format_config.get("csv_sep", ",")

    workspace_dir_conf = locations_config.get('workspace_dir', None)
    workspace_dir_path = workspace_dir_conf.get("path", "")
    workspace_dir = WorkspaceHandler(workspace_dir_path)


    logger.info(">>> Starting sampling files...")

    output_file_path = workspace_dir.get_results_file_path(output_file)

    with open(output_file_path, 'w', newline='', encoding="utf-8") as out_file:
        for file in files:
            file_path = workspace_dir.get_results_file_path(file)

            # count the lines
            count = 0
            with open(file_path, "r", newline='', encoding="utf-8") as in_csv:
                reader = csv.DictReader(in_csv, delimiter=csv_separator, quotechar='"', quoting=csv.QUOTE_NONNUMERIC)
                for row in reader:
                    count += 1

            if count <= lines:
                lines_indices = [x for x in range(0, count)]
            else:
                lines_indices = random.sample(range(0, count), lines)

            count = 0
            lines_to_print = 0
            filename = ""
            prev_lines = deque([], ctx_prev)
            with open(file_path, "r", newline='', encoding="utf-8") as in_csv:
                reader = csv.DictReader(in_csv, delimiter=csv_separator, quotechar='"', quoting=csv.QUOTE_NONNUMERIC)
                for row in reader:
                    if count in lines_indices:
                        filename = row['id'].split(":")[0]

                        out_file.write("".join(["\n"]*ctx_prev))
                        while len(prev_lines) > 0:
                            prev_line = prev_lines.popleft()
                            if prev_line['id'].split(":")[0] == filename:
                                out_file.write(prev_line['contents'] + "\n")

                        out_file.write(row['contents']+"\n")

                        lines_to_print = ctx_next
                    else:
                        if lines_to_print > 0 and row['id'].split(":")[0] == filename:
                            out_file.write(row['contents'] + "\n")
                            lines_to_print -= 1

                    count += 1
                    prev_lines.append(row)

    logger.info(">>> Sample lines saved to {}".format(output_file_path))






